{"version":3,"sources":["components/CharCard.js","App.js","serviceWorker.js","index.js"],"names":["CharCard","props","className","onClick","clickChar","id","alt","name","src","image","App","state","chars","clickedChars","score","topScore","match","filter","char","console","log","length","newScore","setState","checkScore","guessResult","document","getElementById","textContent","style","color","push","require","shuffle","class","this","map","key","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kkEAmBeA,G,MAfE,SAAAC,GAAK,OAClB,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAGvD,yBAAKH,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,Y,OC4F9BC,G,kNA7FbC,MAAQ,CACNC,QACAC,aAAc,GACdC,MAAO,EACPC,SAAU,G,EAIZX,UAAY,SAAAC,GAEV,IAAMW,EAAQ,EAAKL,MAAME,aAAaI,QAAO,SAAAC,GAAI,OAAIA,IAASb,KAI9D,GAHAc,QAAQC,IAAI,UAAYJ,GAGH,IAAjBA,EAAMK,QAAmD,IAAnC,EAAKV,MAAME,aAAaQ,OAAc,CAC9D,IAAIC,EAAW,EAAKX,MAAMG,MAAQ,EAClC,EAAKS,SAAS,CAAET,MAAOQ,IACvB,EAAKE,cAGDC,EAAcC,SAASC,eAAe,gBAC9BC,YAAc,yBAC1BH,EAAYI,MAAMC,MAAQ,QAG1B,IAAMZ,EAAO,EAAKP,MAAMC,MAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKb,KAAOA,KAEzD,EAAKM,MAAME,aAAakB,KAAKb,EAAK,GAAGb,IACrCc,QAAQC,IAAI,kBAAoB,EAAKT,MAAME,cAE7BmB,EAAQ,GACtBC,CAAQ,EAAKtB,MAAMC,OACnB,EAAKW,SAASX,QAIX,GAAII,EAAMK,OAAS,EAAG,CAG3B,IAAII,KAAcC,SAASC,eAAe,gBAC9BC,YAAc,2BAC1BH,EAAYI,MAAMC,MAAQ,MAGxB,EAAKP,SAAS,CAAET,MAAO,IAGvB,EAAKS,SAAS,CAAEV,aAAc,KAGhCM,QAAQC,IAAI,UAAY,EAAKT,MAAMG,Q,EAIrCU,WAAa,WACP,EAAKb,MAAMG,OAAS,EAAKH,MAAMI,UACjC,EAAKQ,SAAS,CAAER,SAAU,EAAKJ,MAAMI,SAAW,K,uDAK1C,IAAD,OACP,OACE,6BACE,yBAAKmB,MAAM,6BACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,eACA,uBAAGA,MAAM,QAAT,8EAGJ,yBAAKhC,UAAU,YAAYG,GAAG,eAC5B,yBAAKA,GAAG,aAAR,UACU8B,KAAKxB,MAAMG,MADrB,iBAC0CqB,KAAKxB,MAAMI,SACnD,0BAAMV,GAAK,eAAX,OAID8B,KAAKxB,MAAMC,MAAMwB,KAAI,SAAAlB,GAAI,OACxB,kBAAC,EAAD,CACEd,UAAW,EAAKA,UAChBC,GAAIa,EAAKb,GACTgC,IAAKnB,EAAKb,GACVI,MAAOS,EAAKT,iB,GArFR6B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCZN2B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASC,eAAe,SDyHpB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.aedc12e6.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport \"./CharCard.css\";\r\n\r\nconst CharCard = props => (\r\n    <div className=\"card\" onClick={() => props.clickChar(props.id)}>\r\n\r\n\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n);\r\n\r\nexport default CharCard;","import React, { Component } from \"react\";\nimport CharCard from \"./components/CharCard\";\nimport chars from \"./chars.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  //setting this.state.chars to the chars json array\n  state = {\n    chars,\n    clickedChars: [],\n    score: 0,\n    topScore: 0\n  };\n\n  //on click function: grab the id\n  clickChar = id => {\n    //if the clicked id is found within the clicked chars array, push to match array\n    const match = this.state.clickedChars.filter(char => char === id);\n    console.log(\"Match: \" + match);\n\n    //if match array is zero, increase score\n    if (match.length === 0 || this.state.clickedChars.length === 0) {\n      var newScore = this.state.score + 1;\n      this.setState({ score: newScore });\n      this.checkScore();\n\n      //Write to span: guessed correctly\n      var guessResult = document.getElementById(\"guessResult\");\n      guessResult.textContent = \"You guessed correctly!\";\n      guessResult.style.color = \"green\";\n\n      // Filter this.state.chars for chars with an id equal to the id clicked\n      const char = this.state.chars.filter(char => char.id === id);\n      //if id matches, push to clicked array\n      this.state.clickedChars.push(char[0].id);\n      console.log(\"Clicked chars: \" + this.state.clickedChars);\n      //shuffle array (and images on page)\n      var shuffle = require('shuffle-array');\n      shuffle(this.state.chars);\n      this.setState(chars);\n    }\n\n    //check if match was found\n    else if (match.length > 0) {\n\n    //Write to span: guessed incorrectly\n    var guessResult = document.getElementById(\"guessResult\");\n    guessResult.textContent = \"You guessed incorrectly!\";\n    guessResult.style.color = \"red\";\n\n    //Reset score to zero\n      this.setState({ score: 0 });\n\n    //Empty the 'clicked' array\n      this.setState({ clickedChars: [] })\n    }\n\n    console.log(\"Score: \" + this.state.score);\n  };\n\n  //if score is greater than top score, increase top score\n  checkScore = () => {\n    if (this.state.score >= this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 })\n    }\n  }\n\n //render html to page\n  render() {\n    return (\n      <div>\n        <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <h1 class=\"display-4\">Memory Game</h1>\n            <p class=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n          </div>\n        </div>\n        <div className=\"container\" id=\"mainSection\">\n          <div id=\"scoreCard\">\n            Score: {this.state.score} | Top Score: {this.state.topScore}\n            <span id = \"guessResult\">  </span>\n          </div>\n\n {/* Map over this.state.chars and render a CharCard component for each char object */}\n          {this.state.chars.map(char => (\n            <CharCard\n              clickChar={this.clickChar}\n              id={char.id}\n              key={char.id}\n              image={char.image}\n\n            />\n          ))}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}